import { Cell } from "./dijkstra";
import {number_to_object_grid, find_path_dijkstra, path_door_counter} from "./navigation"
const directionMap = {
    "north": {
        "west" : "skręć w lewo",
        "east" : "skręć w prawo"
    },
    "south": {
        "west": "skręć w prawo",
        "east": "skręć w lewo"
    },
    "west": {
        "north": "skręć w prawo",
        "south": "skręć w lewo"
    },
    "east": {
        "north": "skręć w lewo",
        "south": "skręć w prawo"
    }
}

const firstMove = {
    "south": "Obróć się",
    "west": "Idź w lewo",
    "east": "Idź w prawo",
    "north": "Idź do przodu"

}

const lastMove = {
    "north": {
        "west" : "po lewej",
        "east" : "po prawej"
    },
    "south": {
        "west": "po prawej",
        "east": "po lewej"
    },
    "west": {
        "north": "po prawej",
        "south": "po lewej"
    },
    "east": {
        "north": "po lewej",
        "south": "po prawej"
    }

}

function translateDirection(current_direction: string, next_direction: string): string {
    return directionMap[current_direction][next_direction.toString()] || "Invalid direction";
}

function translateLastMove(current_direction: string, next_direction: string): string {
    return lastMove[current_direction.toString()][next_direction.toString()] || "Invalid direction";
}

function translateFirstMove(direction: string): string {
    return firstMove[direction] || "";
}


export function createInstructions(grid: Cell[][], start: [number, number], target: [number, number]): Array<string>{
    // createIntructions takes all the data needed to generate a path
    // it needs data that can create a real path at least 3 cell long (couinting start and target)
    // number grid that has to be a dimensional array of numbers
    // start coordinates, that have to be a 0 - floor [3, 4]
    // target coordinates, that have to be a 2 - door [4, 6]
    // first it finds a path generated by navigation.js
    // then iterates every turn and number of doors
    // it creates a list of instructions and returns them in an array
    let path = find_path_dijkstra(start, target, grid);
    let turns_with_doors = path_door_counter(grid, path)
    // checking if first move is in north direction
    let ifnorth = path[0].coordinates[0] == path[1].coordinates[0] && path[0].coordinates[1] > path[1].coordinates[1]
    // checking if the target is on the end of a corridor
    let if_end_at_turn_1 = [path[path.length-1].coordinates[0] -  path[path.length-2].coordinates[0],
                          path[path.length-1].coordinates[1] -  path[path.length-2].coordinates[1]]
    let if_end_at_turn_2 = [path[path.length-2].coordinates[0] -  path[path.length-3].coordinates[0],
                          path[path.length-2].coordinates[1] -  path[path.length-3].coordinates[1]]
    let if_end_at_turn = ! (if_end_at_turn_1[0] == if_end_at_turn_2[0] && if_end_at_turn_1[1] == if_end_at_turn_2[1])
    let number_of_steps = 0;
    let instructions: string[] = []
    for (let [doors, direction] of turns_with_doors) {
        if (number_of_steps == 0)
        {
            if (ifnorth)
            {
                instructions.push(translateFirstMove("north"))
            }
            else
            {
                instructions.push(translateFirstMove(direction))
            }

        }
        if (number_of_steps == turns_with_doors.length - 1)
        {
            if (if_end_at_turn)
            {
                instructions.push(`Po minięciu ${doors} drzwi cel będzie ${translateLastMove(turns_with_doors[number_of_steps - 1][1], direction)} `);
            }
            else
            {
                instructions.push(`Po minięciu ${doors} drzwi ${translateDirection(turns_with_doors[number_of_steps - 1][1], direction)}`)
                instructions.push(`Cel będzie na końcu korytarza`)
            }
        }
        else if (number_of_steps >= 1 )
        {
            instructions.push(`Po minięciu ${doors} drzwi ${translateDirection(turns_with_doors[number_of_steps - 1][1], direction)}`)
        }
        else if (ifnorth)
        {
            instructions.push(`Po minięciu ${doors} drzwi ${translateDirection("north", direction)}`)
        }
        number_of_steps += 1
    }
    return instructions
}



// let number_grid = [
//     [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
//     [1, 0, 2, 2, 1, 0, 0, 0, 0, 0, 1],
//     [1, 0, 2, 0, 1, 0, 0, 0, 0, 2, 1],
//     [1, 0, 1, 0, 2, 2, 2, 1, 0, 0, 1],
//     [1, 0, 2, 0, 0, 0, 0, 0, 0, 2, 1],
//     [1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1],
//     [1, 0, 1, 1, 2, 2, 1, 1, 0, 2, 1],
//     [1, 0, 0, 0, 0, 0, 0, 2, 0, 2, 1],
//     [1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1],
//     [1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1],
//     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
// ];
// console.log(createInstructions(number_grid, [7,9], [2,1]))
// console.log(createInstructions(number_grid, [8,6], [2,1]))
// console.log(createInstructions(number_grid, [8,1], [9,6]))
// console.log(createInstructions(number_grid, [8,4], [3,1]))
// po minięciu 0 drzwi skręć w prawo
// po minięciu 0 drzwi skręć w lewo
// po minięciu 2 drzwi skręć w prawo
// po minięciu 2 drzwi cel będzie po prawej